// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go-v2/aws"
	types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	eks "github.com/aws/aws-sdk-go-v2/service/eks"
	lambda "github.com/aws/aws-sdk-go-v2/service/lambda"
	rds "github.com/aws/aws-sdk-go-v2/service/rds"
	gomock "github.com/golang/mock/gomock"
	rest "k8s.io/client-go/rest"
)

// MockAWSClient is a mock of AWSClient interface.
type MockAWSClient struct {
	ctrl     *gomock.Controller
	recorder *MockAWSClientMockRecorder
}

// MockAWSClientMockRecorder is the mock recorder for MockAWSClient.
type MockAWSClientMockRecorder struct {
	mock *MockAWSClient
}

// NewMockAWSClient creates a new mock instance.
func NewMockAWSClient(ctrl *gomock.Controller) *MockAWSClient {
	mock := &MockAWSClient{ctrl: ctrl}
	mock.recorder = &MockAWSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAWSClient) EXPECT() *MockAWSClientMockRecorder {
	return m.recorder
}

// DescribeAMIs mocks base method.
func (m *MockAWSClient) DescribeAMIs(imageIds []string) ([]types.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAMIs", imageIds)
	ret0, _ := ret[0].([]types.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAMIs indicates an expected call of DescribeAMIs.
func (mr *MockAWSClientMockRecorder) DescribeAMIs(imageIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAMIs", reflect.TypeOf((*MockAWSClient)(nil).DescribeAMIs), imageIds)
}

// DescribeEKSCluster mocks base method.
func (m *MockAWSClient) DescribeEKSCluster(cluster string) (*eks.DescribeClusterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEKSCluster", cluster)
	ret0, _ := ret[0].(*eks.DescribeClusterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEKSCluster indicates an expected call of DescribeEKSCluster.
func (mr *MockAWSClientMockRecorder) DescribeEKSCluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEKSCluster", reflect.TypeOf((*MockAWSClient)(nil).DescribeEKSCluster), cluster)
}

// DescribeEKSClusterAddon mocks base method.
func (m *MockAWSClient) DescribeEKSClusterAddon(cluster, addon string) (*eks.DescribeAddonOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEKSClusterAddon", cluster, addon)
	ret0, _ := ret[0].(*eks.DescribeAddonOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEKSClusterAddon indicates an expected call of DescribeEKSClusterAddon.
func (mr *MockAWSClientMockRecorder) DescribeEKSClusterAddon(cluster, addon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEKSClusterAddon", reflect.TypeOf((*MockAWSClient)(nil).DescribeEKSClusterAddon), cluster, addon)
}

// DescribeRDSClusters mocks base method.
func (m *MockAWSClient) DescribeRDSClusters() (*rds.DescribeDBClustersOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeRDSClusters")
	ret0, _ := ret[0].(*rds.DescribeDBClustersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRDSClusters indicates an expected call of DescribeRDSClusters.
func (mr *MockAWSClientMockRecorder) DescribeRDSClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRDSClusters", reflect.TypeOf((*MockAWSClient)(nil).DescribeRDSClusters))
}

// GetAccountId mocks base method.
func (m *MockAWSClient) GetAccountId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccountId indicates an expected call of GetAccountId.
func (mr *MockAWSClientMockRecorder) GetAccountId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockAWSClient)(nil).GetAccountId))
}

// GetConfig mocks base method.
func (m *MockAWSClient) GetConfig() *aws.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*aws.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockAWSClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockAWSClient)(nil).GetConfig))
}

// GetEKSClusters mocks base method.
func (m *MockAWSClient) GetEKSClusters() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEKSClusters")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEKSClusters indicates an expected call of GetEKSClusters.
func (mr *MockAWSClientMockRecorder) GetEKSClusters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEKSClusters", reflect.TypeOf((*MockAWSClient)(nil).GetEKSClusters))
}

// GetEKSConfig mocks base method.
func (m *MockAWSClient) GetEKSConfig(ctx context.Context, clusterInfo *eks.DescribeClusterOutput) (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEKSConfig", ctx, clusterInfo)
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEKSConfig indicates an expected call of GetEKSConfig.
func (mr *MockAWSClientMockRecorder) GetEKSConfig(ctx, clusterInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEKSConfig", reflect.TypeOf((*MockAWSClient)(nil).GetEKSConfig), ctx, clusterInfo)
}

// GetEKSNamespaces mocks base method.
func (m *MockAWSClient) GetEKSNamespaces(ctx context.Context, config *rest.Config) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEKSNamespaces", ctx, config)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEKSNamespaces indicates an expected call of GetEKSNamespaces.
func (mr *MockAWSClientMockRecorder) GetEKSNamespaces(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEKSNamespaces", reflect.TypeOf((*MockAWSClient)(nil).GetEKSNamespaces), ctx, config)
}

// GetProfile mocks base method.
func (m *MockAWSClient) GetProfile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockAWSClientMockRecorder) GetProfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockAWSClient)(nil).GetProfile))
}

// ListEC2Instances mocks base method.
func (m *MockAWSClient) ListEC2Instances() ([]types.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEC2Instances")
	ret0, _ := ret[0].([]types.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEC2Instances indicates an expected call of ListEC2Instances.
func (mr *MockAWSClientMockRecorder) ListEC2Instances() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEC2Instances", reflect.TypeOf((*MockAWSClient)(nil).ListEC2Instances))
}

// ListEKSAddons mocks base method.
func (m *MockAWSClient) ListEKSAddons(cluster string) (*eks.ListAddonsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEKSAddons", cluster)
	ret0, _ := ret[0].(*eks.ListAddonsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEKSAddons indicates an expected call of ListEKSAddons.
func (mr *MockAWSClientMockRecorder) ListEKSAddons(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEKSAddons", reflect.TypeOf((*MockAWSClient)(nil).ListEKSAddons), cluster)
}

// ListLambdaFunctions mocks base method.
func (m *MockAWSClient) ListLambdaFunctions() (*lambda.ListFunctionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLambdaFunctions")
	ret0, _ := ret[0].(*lambda.ListFunctionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLambdaFunctions indicates an expected call of ListLambdaFunctions.
func (mr *MockAWSClientMockRecorder) ListLambdaFunctions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLambdaFunctions", reflect.TypeOf((*MockAWSClient)(nil).ListLambdaFunctions))
}
